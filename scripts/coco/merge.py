import json
import os
import argparse

import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import utils.pitfall_cameras_utils as pc
import utils.utils as utils

def merge_coco_json(coco_list):
    """ 
    Merges the COCO JSON files in the provided list to a single JSON object.
    
    :param coco_list: List of file paths to the COCO-JSON files we want to merge.
    """
    utils.load_json_from_file

    merged_info = "Annotations for object detections in the images collection in the ECOSTACK-project's controlled conditions experiment, where different insect species are photographed in a tray with paper and soil backgrounds - this set uses only the paper instances. The images were taken in May-August 2023. These COCO-annotations are generated by Stinna Danger and Mikkel Berg for their thesis project at Aarhus University at the Department of Computer Science with biodiversity group at the Department of Ecoscience. The bounding boxes were found using Asger Svennings flatbug-model."
    merged_license = None

    merged_images = []
    merged_annotations = []
    total_files = len(coco_list)

    image_id_offset = 0
    annotation_id_offset = 0
    for index, file in enumerate(coco_list):
        # Load datasets
        coco = utils.load_json_from_file(file)
      
        for img in coco["images"]:
            img["id"] += image_id_offset
            merged_images.append(img)
        
        for ann in coco["annotations"]:
            ann["id"] += annotation_id_offset
            ann["image_id"] += image_id_offset
            merged_annotations.append(ann)

        image_id_offset += len(coco["images"])
        annotation_id_offset += len(coco["annotations"])

        # Print progress
        print(f"--- Processed {index} out of {total_files} files - ({file}).")
   
    print(f"Sum of images: {image_id_offset}\nMerged images: {len(merged_images)}")
    print(f"Sum of anns: {annotation_id_offset}\nMerged anns: {len(merged_annotations)}")

    

    categories_file =  "annotations/categories.json"
    categories_info = utils.load_json_from_file(categories_file)
    categories = [{"id": categories_info["categories"][cat]["id"], "name": cat} for cat in categories_info["categories"].keys()]

    merged = {}
    merged["info"] = merged_info
    merged["license"] = merged_license
    merged["images"] = merged_images
    merged["annotations"] = merged_annotations
    merged["categories"] = categories

    return merged


def merge_all_in_dir(src_dir, dest_path):
    files_to_merge = [os.path.join(src_dir, f) for f in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, f)) and f.endswith(".json")]
    merged = merge_coco_json(coco_list=sorted(files_to_merge))
    utils.save_json_to_file(json_obj=merged, path=dest_path)
    
def main():
    # Set up command-line argument parsing
    parser = argparse.ArgumentParser(description="Merge the json files for COCO-datasets in a directory.")
    src_dir = "annotations/controlled-conditions/original-files/flatbug-coco/"
    dest_path = "annotations/controlled-conditions/info/controlled-conditions_all_unfiltered.json"
    
    merge_all_in_dir(src_dir=src_dir, dest_path=dest_path)

if __name__ == "__main__":
    main()